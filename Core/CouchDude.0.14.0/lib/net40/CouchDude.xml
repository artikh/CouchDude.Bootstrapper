<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CouchDude</name>
    </assembly>
    <members>
        <member name="T:CouchDude.IDocumentAttachmentBag">
            <summary>Document attachments.</summary>
        </member>
        <member name="M:CouchDude.IDocumentAttachmentBag.Create(System.String,System.String,System.String)">
            <summary>Creates new text attachment.</summary>
            <remarks>New attachment's data is embeded to parent document and being saved when documeint is saved. You
            should use <see cref="M:CouchDude.IDatabaseApi.SaveAttachment(CouchDude.IDocumentAttachment,System.String,System.String)"/> if attachment is massive.</remarks>
        </member>
        <member name="M:CouchDude.IDocumentAttachmentBag.Create(System.String,System.Byte[],System.String)">
            <summary>Creates new binary attachment using provided buffer.</summary>
            <remarks>New attachment's data is embeded to parent document and being saved when documeint is saved. You
            should use <see cref="M:CouchDude.IDatabaseApi.SaveAttachment(CouchDude.IDocumentAttachment,System.String,System.String)"/> if attachment is massive.</remarks>
        </member>
        <member name="M:CouchDude.IDocumentAttachmentBag.Create(System.String,System.IO.Stream,System.String)">
            <summary>Creates new binary attachment using provided stream.</summary>
            <remarks>New attachment's data is embeded to parent document and being saved when documeint is saved. You
            should use <see cref="M:CouchDude.IDatabaseApi.SaveAttachment(CouchDude.IDocumentAttachment,System.String,System.String)"/> if attachment is massive.</remarks>
        </member>
        <member name="M:CouchDude.IDocumentAttachmentBag.Delete(System.String)">
            <summary>Removes attachment descriptor resulting in deletion of attachment itself when document is saved.</summary>
        </member>
        <member name="P:CouchDude.IDocumentAttachmentBag.Item(System.String)">
            <summary>Provides access to collection of document's attachments.</summary>
        </member>
        <member name="M:CouchDude.Api.DocumentAttachmentBag.#ctor(CouchDude.Api.Document)">
            <constructor />
        </member>
        <member name="T:CouchDude.IBulkUpdateBatch">
            <summary>Bulk update changes summary interface.</summary>
        </member>
        <member name="M:CouchDude.IBulkUpdateBatch.Update(CouchDude.IDocument)">
            <summary>Requires provided document to be updated.</summary>
        </member>
        <member name="M:CouchDude.IBulkUpdateBatch.Create(CouchDude.IDocument)">
            <summary>Requires provided document to be created.</summary>
        </member>
        <member name="M:CouchDude.IBulkUpdateBatch.Delete(CouchDude.IDocument)">
            <summary>Requires provided document to be deleted.</summary>
        </member>
        <member name="M:CouchDude.IBulkUpdateBatch.Delete(System.String,System.String)">
            <summary>Requires document of provided ID and revision to be deleted.</summary>
        </member>
        <member name="M:CouchDude.Api.BulkUpdateBatch.#ctor(CouchDude.Api.DbUriConstructor)">
            <constructor />
        </member>
        <member name="T:CouchDude.ICouchApi">
            <summary>Represents low-level CouchDB API.</summary>
        </member>
        <member name="M:CouchDude.ICouchApi.Db(System.String)">
            <summary>Returns database-specific API object.</summary>
        </member>
        <member name="M:CouchDude.ICouchApi.RequestAllDbNames">
            <summary>Requests collection of names of all avaliable databases.</summary>
        </member>
        <member name="P:CouchDude.ICouchApi.Replicator">
            <summary>Replicator-specific API.</summary>
        </member>
        <member name="P:CouchDude.ICouchApi.Synchronously">
            <summary>Synchronous version of API.</summary>
        </member>
        <member name="M:CouchDude.Api.CouchApi.#ctor(CouchDude.Http.IHttpClient,System.Uri)">
            <constructor />
        </member>
        <member name="T:CouchDude.Api.CouchError">
            <summary>Represents CouchDB error.</summary>
        </member>
        <member name="T:CouchDude.Api.HttpResponseMessageDocumentAttachment">
            <summary><see cref="T:CouchDude.IDocumentAttachment"/> implementation returning from attachment request.</summary>
        </member>
        <member name="T:CouchDude.Api.JsonFragment">
            <summary>Implements <see cref="T:CouchDude.IJsonFragment"/> wrapping <see cref="T:Newtonsoft.Json.Linq.JToken"/>.</summary>
        </member>
        <member name="T:CouchDude.IJsonFragment">
            <summary>Represents simple JSON fragment. Data could be accessed as dynamic.</summary>
        </member>
        <member name="M:CouchDude.IJsonFragment.Read">
            <summary>Produces <see cref="T:System.IO.TextReader"/> over content of the JSON fragmet.</summary>
            <remarks>Client code is responsible for disposing it.</remarks>
        </member>
        <member name="M:CouchDude.IJsonFragment.Deserialize(System.Type)">
            <summary>Deserializes current <see cref="T:CouchDude.Api.JsonFragment"/> to object of provided <paramref name="type"/>.</summary>
        </member>
        <member name="M:CouchDude.IJsonFragment.TryDeserialize(System.Type)">
            <summary>Deserializes current <see cref="T:CouchDude.Api.JsonFragment"/> to object of provided <paramref name="type"/> returning
            <c>null</c> if deserialization was unsuccessful..</summary>
        </member>
        <member name="M:CouchDude.IJsonFragment.WriteTo(System.IO.TextWriter)">
            <summary>Writes JSON string to provided text writer.</summary>
        </member>
        <member name="F:CouchDude.Api.JsonFragment.Converters">
            <summary>Standard set of JSON value convertors.</summary>
        </member>
        <member name="F:CouchDude.Api.JsonFragment.Serializer">
            <summary>Default serializer instance.</summary>
        </member>
        <member name="F:CouchDude.Api.JsonFragment.jsonToken">
            <summary>Underlying Newtonsoft Json.NET token.</summary>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.#ctor">
            <constructor />
        </member>
        <member name="M:CouchDude.Api.JsonFragment.#ctor(System.String)">
            <summary>Parses JSON string.</summary>
            <exception cref="T:System.ArgumentNullException">Provided string is null or empty.</exception>
            <exception cref="T:CouchDude.ParseException">Provided string contains no or invalid JSON document.</exception>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.#ctor(System.IO.TextReader)">
            <summary>Loads JSON from provided text reader.</summary>
            <param name="textReader"><see cref="T:System.IO.TextReader"/> to read JSON from. Should be closed (disposed) by caller.</param>
            <remarks>Text reader should be disposed outside of the constructor,</remarks>
            <exception cref="T:System.ArgumentNullException">Provided text reader is null.</exception>
            <exception cref="T:CouchDude.ParseException">Provided text reader is empty or not JSON.</exception>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.#ctor(Newtonsoft.Json.Linq.JToken)">
            <constructor />
        </member>
        <member name="M:CouchDude.Api.JsonFragment.ToString">
            <summary>Converts document to JSON string.</summary>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.Read">
            <summary>Produces <see cref="T:System.IO.TextReader"/> over content of the JSON fragmet.</summary>
            <remarks>Client code is responsible for disposing it.</remarks>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.Deserialize(System.Type)">
            <summary>Deserializes current <see cref="T:CouchDude.Api.JsonFragment"/> to object of provided <paramref name="type"/>.</summary>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.TryDeserialize(System.Type)">
            <summary>Deserializes current <see cref="T:CouchDude.Api.JsonFragment"/> to object of provided <paramref name="type"/> returning
            <c>null</c> if deserialization was unsuccessful..</summary>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.Serialize(System.Object)">
            <summary>Serializes provided object to <see cref="T:CouchDude.Api.JsonFragment"/>.</summary>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.CreateSerializerSettings">
            <summary>Creates standard serializen properties.</summary>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.WriteTo(System.IO.TextWriter)">
            <summary>Writes JSON string to provided text writer.</summary>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.Equals(CouchDude.Api.JsonFragment)">
            <inheritdoc />
        </member>
        <member name="M:CouchDude.Api.JsonFragment.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CouchDude.Api.JsonFragment.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:CouchDude.Api.JsonFragment.JsonToken">
            <summary>Underlying Newtonsoft Json.NET token.</summary>
        </member>
        <member name="T:CouchDude.Api.JsonFragment.CamelCasePrivateSetterPropertyContractResolver">
            <summary>Resolves private setter properties writable.</summary>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.CamelCasePrivateSetterPropertyContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc />
        </member>
        <member name="T:CouchDude.Api.JsonFragment.ForwardingMetaObject">
            <summary>Forward dynamic behaviour to another object.</summary>
            <remarks>See. http://matousek.wordpress.com/2009/11/07/forwarding-meta-object </remarks>
        </member>
        <member name="M:CouchDude.Api.JsonFragment.ForwardingMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object,System.Dynamic.IDynamicMetaObjectProvider,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <constructor />
        </member>
        <member name="T:CouchDude.IDocumentAttachment">
            <summary>Describes document attachment</summary>
        </member>
        <member name="M:CouchDude.IDocumentAttachment.SetData(System.IO.Stream)">
            <summary>Sets attachment's inline data.</summary>
        </member>
        <member name="M:CouchDude.IDocumentAttachment.OpenRead">
            <summary>Opens attachment for read.</summary>
            <remarks>This is remote call if <see cref="P:CouchDude.IDocumentAttachment.Inline"/> is false.</remarks>
        </member>
        <member name="P:CouchDude.IDocumentAttachment.Id">
            <summary>Name of the attachment. Could not be changed - create new attachment insted.</summary>
        </member>
        <member name="P:CouchDude.IDocumentAttachment.ContentType">
            <summary>Attachment content type.</summary>
        </member>
        <member name="P:CouchDude.IDocumentAttachment.Inline">
            <summary>Indicates whether attachment data. is loaded as part of document (base64 encoded).</summary>
        </member>
        <member name="P:CouchDude.IDocumentAttachment.Length">
            <summary>Length of the </summary>
        </member>
        <member name="P:CouchDude.IDocumentAttachment.Syncronously">
            <summary>Returns syncronous version of the async attachment method.</summary>
        </member>
        <member name="M:CouchDude.Api.HttpResponseMessageDocumentAttachment.#ctor(System.String,System.Net.Http.HttpResponseMessage)">
            <constructor />
        </member>
        <member name="T:CouchDude.Api.WrappingDocumentAttachment">
            <summary>CouchDB attacment implemented by wrapping the <see cref="T:Newtonsoft.Json.Linq.JObject"/> recived from CouchDB.</summary>
            <remarks>All ancestors are quasi-immutable. Data underneath in could change, but </remarks>
        </member>
        <member name="M:CouchDude.Api.WrappingDocumentAttachment.#ctor(System.String,CouchDude.Api.Document)">
            <summary>Creates attachment wrapping existing attachment 
            descriptor (probably loaded from CouchDB)</summary>
        </member>
        <member name="M:CouchDude.Api.WrappingDocumentAttachment.OpenRead">
            <inheritdoc />
        </member>
        <member name="P:CouchDude.Api.WrappingDocumentAttachment.Id">
            <inheritdoc />
        </member>
        <member name="P:CouchDude.Api.WrappingDocumentAttachment.ContentType">
            <inheritdoc />
        </member>
        <member name="P:CouchDude.Api.WrappingDocumentAttachment.Length">
            <inheritdoc />
        </member>
        <member name="P:CouchDude.Api.WrappingDocumentAttachment.Inline">
            <inheritdoc />
        </member>
        <member name="T:CouchDude.Api.IsoUtcDateTimeConverter">
            <summary>Netonsoft Json.NET <see cref="T:System.DateTime"/>/<see cref="T:System.DateTimeOffset"/> converter saving date/time using ISO 8601 format.
            If fed with relative (non-UTC) time should convert it to UTC.</summary>
        </member>
        <member name="M:CouchDude.Api.IsoUtcDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Api.IsoUtcDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Api.JsonContent.#ctor(System.String)">
            <constructor />
        </member>
        <member name="M:CouchDude.Api.JsonContent.#ctor(CouchDude.IDocument)">
            <constructor />
        </member>
        <member name="M:CouchDude.Api.DatabaseApiReference.#ctor(CouchDude.IDatabaseApi)">
            <constructor />
        </member>
        <member name="T:CouchDude.IReplicatorApi">
            <summary>Replicator database wrapping APIs.</summary>
        </member>
        <member name="M:CouchDude.IReplicatorApi.SaveDescriptor(CouchDude.ReplicationTaskDescriptor)">
            <summary>Creates new or updates existing replication task.</summary>
        </member>
        <member name="M:CouchDude.IReplicatorApi.RequestDescriptorById(System.String)">
            <summary>Requests replication task by it's ID.</summary>
        </member>
        <member name="M:CouchDude.IReplicatorApi.DeleteDescriptor(CouchDude.ReplicationTaskDescriptor)">
            <summary>Demands replication task from replicator database deletion.</summary>
        </member>
        <member name="M:CouchDude.IReplicatorApi.GetAllDescriptorNames">
            <summary>Requests all replication task namess.</summary>
        </member>
        <member name="P:CouchDude.IReplicatorApi.Synchronously">
            <summary>Synchronous version of API.</summary>
        </member>
        <member name="T:CouchDude.ISynchronousCouchApi">
            <summary>Synchronous version of low-level CouchDB API.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousCouchApi.RequestAllDbNames">
            <summary>Returns collection of names of all avaliable databases.</summary>
        </member>
        <member name="M:CouchDude.Api.SynchronousCouchApi.#ctor(CouchDude.ICouchApi)">
            <constructor />
        </member>
        <member name="T:CouchDude.ISynchronousDatabaseApi">
            <summary>Synchronous version of databes-level APIs.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.RequestDocument(System.String,System.String)">
            <summary>Requests CouchDB for document using <paramref name="docId"/> 
            and <paramref name="revision"/> and waits for result of the operation.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.SaveDocument(CouchDude.IDocument)">
            <summary>Saves new document to CouchDB and waits for the result of the operation.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.CopyDocument(System.String,System.String,System.String,System.String)">
            <summary>Creates new document by copying another document's content.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.RequestLastestDocumentRevision(System.String)">
            <summary>Retrives current document revision from CouchDB and waits for the result of the operation. </summary>
            <remarks><c>null</c> returned if there is no such document in database.</remarks>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.DeleteDocument(System.String,System.String)">
            <summary>Deletes document of provided <paramref name="docId"/> if it's revision
            is equal to provided <paramref name="revision"/> and waits for the result of the operation.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.BulkUpdate(System.Action{CouchDude.IBulkUpdateBatch})">
            <summary>Creates, updates and deletes several documents as a whole from database. </summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.Query(CouchDude.ViewQuery)">
            <summary>Queries CouchDB view and waits for the result of the operation.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.QueryLucene(CouchDude.LuceneQuery)">
            <summary>Queries couchdb-lucene index and waits for the result of the operation.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.Create">
            <summary>Demands database to be created and waits for result of the operation.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.Delete">
            <summary>Demands database to be deleted and waits for result of the operation.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousDatabaseApi.RequestInfo">
            <summary>Demands database status information and waits for result of the operation.</summary>
        </member>
        <member name="M:CouchDude.Api.SynchronousDatabaseApi.#ctor(CouchDude.IDatabaseApi)">
            <constructor />
        </member>
        <member name="M:CouchDude.Api.SynchronousDatabaseApi.Query(CouchDude.ViewQuery)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Api.SynchronousDatabaseApi.QueryLucene(CouchDude.LuceneQuery)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Api.SynchronousDatabaseApi.Create">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Api.SynchronousDatabaseApi.Delete">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Api.SynchronousDatabaseApi.RequestInfo">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Api.LuceneQueryResultParser">
            <summary>Loads couchdb-lucene request result from provided <see cref="T:System.IO.TextReader"/>.</summary>
        </member>
        <member name="M:CouchDude.Api.LuceneQueryResultParser.Parse(System.IO.TextReader,CouchDude.LuceneQuery)">
            <summary>Loads view request result from provided <see cref="T:System.IO.TextReader"/>.</summary>
        </member>
        <member name="T:CouchDude.ISynchronousReplicatorApi">
            <summary>Replicator database wrapping APIs.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousReplicatorApi.SaveDescriptor(CouchDude.ReplicationTaskDescriptor)">
            <summary>Schedules new or updates existing replication task.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousReplicatorApi.RequestDescriptorById(System.String)">
            <summary>Retrives replication task by it's ID.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousReplicatorApi.Delete(CouchDude.ReplicationTaskDescriptor)">
            <summary>Removes replication task from replicator database.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousReplicatorApi.GetAllDescriptorNames">
            <summary>Retrives all replication task names.</summary>
        </member>
        <member name="T:CouchDude.Api.UriConverter">
            <summary>Newtonsoft Json.NET <see cref="T:System.Uri"/> converter supporting relative URIs.</summary>
        </member>
        <member name="M:CouchDude.Api.UriConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Api.UriConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Api.UriConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.ISyncronousDocumentAttachment">
            <summary>Describes document attachment</summary>
        </member>
        <member name="M:CouchDude.ISyncronousDocumentAttachment.OpenRead">
            <summary>Opens attachment for read and waits for result of the operation.</summary>
            <remarks>This is remote call if <see cref="P:CouchDude.IDocumentAttachment.Inline"/> is false.</remarks>
        </member>
        <member name="T:CouchDude.Api.ViewQueryResultParser">
            <summary>Loads view request result from provided <see cref="T:System.IO.TextReader"/>.</summary>
        </member>
        <member name="M:CouchDude.Api.ViewQueryResultParser.Parse(System.IO.TextReader,CouchDude.ViewQuery)">
            <summary>Loads view request result from provided <see cref="T:System.IO.TextReader"/>.</summary>
        </member>
        <member name="T:CouchDude.Configuration.EntityTypeToDocumentTypeConvention">
            <summary>Entity type to document type conversion convention.</summary>
        </member>
        <member name="T:CouchDude.Configuration.EntityIdToDocumentIdConvention">
            <summary>Entity ID to document ID conversion convention.</summary>
        </member>
        <member name="T:CouchDude.Configuration.DocumentIdToEntityIdConvention">
            <summary>Document ID to entity ID conversion convention.</summary>
        </member>
        <member name="T:CouchDude.Configuration.EntityConfig">
            <summary>Default entity configuration object delegating all actions to public field delegates.</summary>
        </member>
        <member name="T:CouchDude.Configuration.IEntityConfig">
            <summary>Entity configuration item.</summary>
        </member>
        <member name="M:CouchDude.Configuration.IEntityConfig.ConvertDocumentIdToEntityId(System.String)">
            <summary>Converts document ID to entity ID.</summary>
        </member>
        <member name="M:CouchDude.Configuration.IEntityConfig.ConvertEntityIdToDocumentId(System.String)">
            <summary>Converts entity ID to document ID.</summary>
        </member>
        <member name="M:CouchDude.Configuration.IEntityConfig.SetId(System.Object,System.String)">
            <summary>Sets entity ID property.</summary>
        </member>
        <member name="M:CouchDude.Configuration.IEntityConfig.GetId(System.Object)">
            <summary>Sets entity ID property.</summary>
        </member>
        <member name="M:CouchDude.Configuration.IEntityConfig.SetRevision(System.Object,System.String)">
            <summary>Sets entity revision property.</summary>
        </member>
        <member name="M:CouchDude.Configuration.IEntityConfig.GetRevision(System.Object)">
            <summary>Sets entity revision property.</summary>
        </member>
        <member name="P:CouchDude.Configuration.IEntityConfig.EntityType">
            <summary>Exec type of the entity.</summary>
        </member>
        <member name="P:CouchDude.Configuration.IEntityConfig.DocumentType">
            <summary>Document type as it shows in database.</summary>
        </member>
        <member name="P:CouchDude.Configuration.IEntityConfig.IsIdMemberPresent">
            <summary>Detects if special ID member have been found on entity type.</summary>
        </member>
        <member name="P:CouchDude.Configuration.IEntityConfig.IsRevisionPresent">
            <summary>Detects if special revision member have been found on entity type.</summary>
        </member>
        <member name="P:CouchDude.Configuration.IEntityConfig.IgnoredMembers">
            <summary>Retruns entity type members that should be ignored on 
            serialization and deserialization.</summary>
        </member>
        <member name="M:CouchDude.Configuration.EntityConfig.#ctor(System.Type,CouchDude.Configuration.EntityTypeToDocumentTypeConvention,CouchDude.Configuration.ISpecialMember,CouchDude.Configuration.ISpecialMember,CouchDude.Configuration.DocumentIdToEntityIdConvention,CouchDude.Configuration.EntityIdToDocumentIdConvention)">
            <constructor />
        </member>
        <member name="M:CouchDude.Configuration.EntityConfig.ConvertDocumentIdToEntityId(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Configuration.EntityConfig.ConvertEntityIdToDocumentId(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Configuration.EntityConfig.SetId(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Configuration.EntityConfig.GetId(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Configuration.EntityConfig.SetRevision(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Configuration.EntityConfig.GetRevision(System.Object)">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Configuration.EntityConfig.EntityType">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Configuration.EntityConfig.DocumentType">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Configuration.EntityConfig.IsIdMemberPresent">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Configuration.EntityConfig.IsRevisionPresent">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Configuration.EntityConfig.IgnoredMembers">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Configuration.EntityConfigUtils">
            <summary>Entension methods over <see cref="T:CouchDude.Configuration.IEntityConfig"/> interface.</summary>
        </member>
        <member name="M:CouchDude.Configuration.EntityConfigUtils.IsCompatibleWith``1(CouchDude.Configuration.IEntityConfig)">
            <summary>Checks if entity is compatible with provided type.</summary>
        </member>
        <member name="M:CouchDude.Configuration.EntityConfigUtils.GetId(CouchDude.Configuration.IEntityConfig,System.Object)">
            <summary>Retrives entity identifier throwing execption it could not be retrived.</summary>
        </member>
        <member name="T:CouchDude.Configuration.EntityRegistry">
            <summary>Simple wrapper over collection of <see cref="T:CouchDude.Configuration.EntityConfig"/> instances with
            lookup by document type and entity type.</summary>
        </member>
        <member name="T:CouchDude.Configuration.GuidIdGenerator">
            <summary>Generates random IDs using <see cref="M:System.Guid.NewGuid"/> method.</summary>
        </member>
        <member name="T:CouchDude.Configuration.IIdGenerator">
            <summary>Document ID generator interface.</summary>
        </member>
        <member name="M:CouchDude.Configuration.IIdGenerator.GenerateId">
            <summary>Generates new ID for the document.</summary>
        </member>
        <member name="M:CouchDude.Configuration.GuidIdGenerator.GenerateId">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Configuration.ISpecialMember">
            <summary>Abstracts special entity type member manipulations.</summary>
        </member>
        <member name="M:CouchDude.Configuration.ISpecialMember.SetValue(System.Object,System.String)">
            <summary>Sets new special member value. Does nothing if <see cref="P:CouchDude.Configuration.ISpecialMember.IsDefined"/> is <c>false</c>.</summary>
        </member>
        <member name="M:CouchDude.Configuration.ISpecialMember.GetValue(System.Object)">
            <summary>Returns current value of special member. 
            Returns <c>null</c> if <see cref="P:CouchDude.Configuration.ISpecialMember.IsDefined"/> is <c>false</c>.</summary>
        </member>
        <member name="P:CouchDude.Configuration.ISpecialMember.IsDefined">
            <summary>Determines if member is indeed defined.</summary>
        </member>
        <member name="P:CouchDude.Configuration.ISpecialMember.EntityType">
            <summary>Member's entity type.</summary>
        </member>
        <member name="P:CouchDude.Configuration.ISpecialMember.RawMemberInfo">
            <summary>Returns raw <see cref="T:System.Reflection.MemberInfo"/> instance if special member indeed implemented as
            class member. This is used for the purpures of ignoring this class member on the stage of serialisation.</summary>
        </member>
        <member name="T:CouchDude.Configuration.ParticularyNamedPropertyOrPubilcFieldSpecialMember">
            <summary>Finds and manipulates with special member declared as </summary>
        </member>
        <member name="T:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember">
            <summary>Wraps special member implemented as actual property or public field on the entity class.</summary>
        </member>
        <member name="M:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.#ctor(System.Type,System.Reflection.MemberInfo)">
            <constructor />
        </member>
        <member name="M:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.#ctor(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <constructor />
        </member>
        <member name="M:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.SetValue(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.GetValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.TypeIsCompatibleWithString(System.Type)">
            <summary>Determines if type is compatible with <see cref="T:System.String"/>.</summary>
        </member>
        <member name="M:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.IsFildOk(System.Reflection.FieldInfo)">
            <summary>Determines if filed is OK to be used as base of the specal member.</summary>
        </member>
        <member name="M:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.IsPropertyOk(System.Reflection.PropertyInfo)">
            <summary>Determines if property is OK to be used as base of the specal member.</summary>
        </member>
        <member name="P:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.IsDefined">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.EntityType">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Configuration.PropertyOrPubilcFieldSpecialMember.RawMemberInfo">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Configuration.ParticularyNamedPropertyOrPubilcFieldSpecialMember.#ctor(System.Type,System.String[])">
            <constructor />
        </member>
        <member name="T:CouchDude.Configuration.SequentialUuidIdGenerator">
            <summary>Generates UUIDs using algorithm similar to CouchBD's 'sequence'
            algorithm.</summary>
        </member>
        <member name="M:CouchDude.Configuration.SequentialUuidIdGenerator.GenerateId">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Api.Document">
            <summary>CouchDB document implemented wrapping <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</summary>
            <remarks>Document object is not thread safe and should not be used concurrently.</remarks>
        </member>
        <member name="T:CouchDude.IDocument">
            <summary>Describes CouchDB document.</summary>
        </member>
        <member name="M:CouchDude.IDocument.Deserialize(CouchDude.Configuration.IEntityConfig)">
            <summary>Deserializes document to new entity object.</summary>
            <param name="entityConfig">Entity configuration used to deserialize it properly.</param>
        </member>
        <member name="M:CouchDude.IDocument.TryDeserialize(CouchDude.Configuration.IEntityConfig)">
            <summary>Deserializes document to new entity object returning <c>null</c> insted of exception if
            it is impossible.</summary>
            <param name="entityConfig">Entity configuration used to deserialize it properly.</param>
        </member>
        <member name="M:CouchDude.IDocument.Deserialize(System.Type)">
            <summary>Deserializes document to object of provided <paramref name="type"/>.</summary>
        </member>
        <member name="M:CouchDude.IDocument.TryDeserialize(System.Type)">
            <summary>Deserializes document to object of provided <paramref name="type"/> returning
            <c>null</c> if deserialization was unsuccessful.</summary>
        </member>
        <member name="M:CouchDude.IDocument.Read">
            <summary>Produces <see cref="T:System.IO.TextReader"/> over content of the JSON fragmet.</summary>
            <remarks>Client code is responsible for disposing it.</remarks>
        </member>
        <member name="M:CouchDude.IDocument.WriteTo(System.IO.TextWriter)">
            <summary>Writes JSON string to provided text writer.</summary>
        </member>
        <member name="P:CouchDude.IDocument.Id">
            <summary>Document identifier or <c>null</c> if no _id property 
            found or it's empty.</summary>
        </member>
        <member name="P:CouchDude.IDocument.Revision">
            <summary>Revision of the document or <c>null</c> if no _rev property 
            found or it's empty.</summary>
        </member>
        <member name="P:CouchDude.IDocument.Type">
            <summary>Type of the document or <c>null</c> if no type property 
            found or it's empty.</summary>
        </member>
        <member name="P:CouchDude.IDocument.DocumentAttachments">
            <summary>List of documet attachments.</summary>
        </member>
        <member name="M:CouchDude.Api.Document.Deserialize(CouchDude.Configuration.IEntityConfig)">
            <summary>Deserializes document to new entity object.</summary>
            <param name="entityConfig">Entity configuration used to deserialize it properly.</param>
        </member>
        <member name="M:CouchDude.Api.Document.TryDeserialize(CouchDude.Configuration.IEntityConfig)">
            <summary>Deserializes document to new entity object returning <c>null</c> insted of exception if
            it is impossible.</summary>
            <param name="entityConfig">Entity configuration used to deserialize it properly.</param>
        </member>
        <member name="M:CouchDude.Api.Document.Serialize(System.Object)">
            <summary>Serializes entity in simple mode not using configuration settings. Entity required 
            to have _id  property.</summary>
        </member>
        <member name="M:CouchDude.Api.Document.Serialize(System.Object,CouchDude.Configuration.IEntityConfig)">
            <summary>Serializes entity using provided <paramref name="entityConfig"/> producing
            new <see cref="T:CouchDude.Api.Document"/> instance.</summary>
        </member>
        <member name="M:CouchDude.Api.Document.#ctor">
            <constructor />
        </member>
        <member name="M:CouchDude.Api.Document.#ctor(System.String)">
            <summary>Parses CouchDB document string.</summary>
            <exception cref="T:System.ArgumentNullException">Provided string is null or empty.</exception>
            <exception cref="T:CouchDude.ParseException">Provided string contains no or invalid JSON document.</exception>
        </member>
        <member name="M:CouchDude.Api.Document.#ctor(System.IO.TextReader)">
            <summary>Loads CouchDB document from provided text reader.</summary>
            <param name="textReader"><see cref="T:System.IO.TextReader"/> to read JSON from. Should be closed (disposed) by caller.</param>
            <remarks>Text reader should be disposed outside of the constructor,</remarks>
            <exception cref="T:System.ArgumentNullException">Provided text reader is null.</exception>
            <exception cref="T:CouchDude.ParseException">Provided text reader is empty or not JSON.</exception>
        </member>
        <member name="M:CouchDude.Api.Document.#ctor(Newtonsoft.Json.Linq.JObject)">
            <constructor />
        </member>
        <member name="M:CouchDude.Api.Document.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:CouchDude.Api.Document.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:CouchDude.Api.Document.JsonObject">
            <summary>Underlying Newtonsoft Json.NET object.</summary>
        </member>
        <member name="P:CouchDude.Api.Document.Id">
            <summary>Document identifier or <c>null</c> if no _id property 
            found or it's empty.</summary>
        </member>
        <member name="P:CouchDude.Api.Document.Revision">
            <summary>Revision of the document or <c>null</c> if no _rev property 
            found or it's empty.</summary>
        </member>
        <member name="P:CouchDude.Api.Document.Type">
            <summary>Type of the document or <c>null</c> if no type property 
            found or it's empty.</summary>
        </member>
        <member name="P:CouchDude.Api.Document.DocumentAttachments">
            <inheritdoc />
        </member>
        <member name="T:CouchDude.DatabaseInfo">
            <summary>Describes current CouchDB database state.</summary>
        </member>
        <member name="F:CouchDude.DatabaseInfo.Name">
            <summary>Database name.</summary>
        </member>
        <member name="F:CouchDude.DatabaseInfo.Exists">
            <summary>Indicates if database exists.</summary>
        </member>
        <member name="F:CouchDude.DatabaseInfo.DocumentCount">
            <summary>Number of documents (including design documents) in the database.</summary>
        </member>
        <member name="F:CouchDude.DatabaseInfo.UpdateSequenceNumber">
            <summary>Current number of updates to the database</summary>
        </member>
        <member name="F:CouchDude.DatabaseInfo.PurgeOperationsPerformed">
            <summary>Number of purge operations</summary>
        </member>
        <member name="F:CouchDude.DatabaseInfo.DoesCompactionRunning">
            <summary>Indicates, if a compaction is running</summary>
        </member>
        <member name="F:CouchDude.DatabaseInfo.FileSizeInBytes">
            <summary>Current size in Bytes of the database (size of views indexes on disk are not included)</summary>
        </member>
        <member name="F:CouchDude.DatabaseInfo.FileFormatVersion">
            <summary>Current version of the internal database format on disk</summary>
        </member>
        <member name="M:CouchDude.DatabaseInfo.#ctor(System.Boolean,System.String,CouchDude.IJsonFragment)">
            <summary>Converts database info document into easy to use object.</summary>
        </member>
        <member name="T:CouchDude.DocumentInfo">
            <summary>Document ID and revision. </summary>
        </member>
        <member name="F:CouchDude.DocumentInfo.Id">
            <summary>Document ID.</summary>
        </member>
        <member name="F:CouchDude.DocumentInfo.Revision">
            <summary>Document revision.</summary>
        </member>
        <member name="M:CouchDude.DocumentInfo.#ctor(System.String,System.String)">
            <constructor />
        </member>
        <member name="M:CouchDude.DocumentInfo.Equals(CouchDude.DocumentInfo)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.DocumentInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.DocumentInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.DocumentAttachmentMissingException">
            <summary>Exception thrown if operation on unexisting attachment was requested.</summary>
        </member>
        <member name="T:CouchDude.CouchCommunicationException">
            <summary> CouchCommunication exception.</summary>
        </member>
        <member name="T:CouchDude.CouchDudeException">
            <summary>Base class for all couch dude exeptions for better catching.</summary>
        </member>
        <member name="M:CouchDude.CouchDudeException.#ctor">
            <constructor />
        </member>
        <member name="M:CouchDude.CouchDudeException.#ctor(System.String)">
            <constructor />
        </member>
        <member name="M:CouchDude.CouchDudeException.#ctor(System.String,System.Exception)">
            <constructor />
        </member>
        <member name="M:CouchDude.CouchDudeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <constructor />
        </member>
        <member name="M:CouchDude.CouchCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.CouchCommunicationException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.CouchCommunicationException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.CouchCommunicationException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.CouchCommunicationException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.CouchCommunicationException"/> class.</summary>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.CouchCommunicationException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.CouchCommunicationException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.CouchCommunicationException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.CouchCommunicationException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CouchDude.CouchCommunicationException.#ctor(System.Exception,System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.CouchCommunicationException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.DocumentAttachmentMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.DatabaseMissingException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.DocumentAttachmentMissingException.#ctor(System.String,System.String,System.String)">
            <constructor />
        </member>
        <member name="T:CouchDude.LazyLoadingException">
            <summary> LazyLoading exception.</summary>
        </member>
        <member name="M:CouchDude.LazyLoadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.LazyLoadingException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.LazyLoadingException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.LazyLoadingException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.LazyLoadingException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.LazyLoadingException"/> class.</summary>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.LazyLoadingException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.LazyLoadingException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.LazyLoadingException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.LazyLoadingException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CouchDude.LazyLoadingException.#ctor(System.Exception,System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.LazyLoadingException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:CouchDude.DatabaseMissingException">
            <summary>Exception thrown if non-existent database have been requested.</summary>
        </member>
        <member name="M:CouchDude.DatabaseMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.DatabaseMissingException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.DatabaseMissingException.#ctor(System.String)">
            <constructor />
        </member>
        <member name="T:CouchDude.InvalidDocumentException">
            <summary> InvalidDocument exception.</summary>
        </member>
        <member name="M:CouchDude.InvalidDocumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.InvalidDocumentException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.InvalidDocumentException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.InvalidDocumentException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.InvalidDocumentException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.InvalidDocumentException"/> class.</summary>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.InvalidDocumentException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.InvalidDocumentException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.InvalidDocumentException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.InvalidDocumentException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CouchDude.InvalidDocumentException.#ctor(System.Exception,System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.InvalidDocumentException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:CouchDude.LuceneIndexNotFoundException">
            <summary>Exception thrown if no couchdb-lucene index specified in query was found in DB.</summary>
        </member>
        <member name="T:CouchDude.QueryException">
            <summary> Query exception.</summary>
        </member>
        <member name="M:CouchDude.QueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.QueryException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.QueryException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.QueryException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.QueryException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.QueryException"/> class.</summary>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.QueryException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.QueryException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.QueryException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.QueryException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CouchDude.QueryException.#ctor(System.Exception,System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.QueryException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.LuceneIndexNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ViewNotFoundException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.LuceneIndexNotFoundException.#ctor(CouchDude.LuceneQuery)">
            <constructor />
        </member>
        <member name="T:CouchDude.ViewNotFoundException">
            <summary>Exception thrown if no view specified in query was found in DB.</summary>
        </member>
        <member name="M:CouchDude.ViewNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ViewNotFoundException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.ViewNotFoundException.#ctor(CouchDude.ViewQuery)">
            <constructor />
        </member>
        <member name="T:CouchDude.Factory">
            <summary>Factory class for main CouchDude API classes.</summary>
        </member>
        <member name="M:CouchDude.Factory.CreateSessionFactory(CouchDude.Settings,CouchDude.Http.IHttpClient)">
            <summary>Creates session factory from provided <paramref name="settings"/> 
            and <paramref name="httpClient"/> if provided.</summary>
        </member>
        <member name="M:CouchDude.Factory.CreateHttpClient">
            <summary>Creates standard implementation of <see cref="T:CouchDude.Http.IHttpClient"/>.</summary>
        </member>
        <member name="M:CouchDude.Factory.CreateCouchApi(System.String,CouchDude.Http.IHttpClient)">
            <summary>Creates new <see cref="T:CouchDude.IDatabaseApi"/> instance associated with provided server address using <paramref name="httpClient"/> if provided.</summary>
        </member>
        <member name="M:CouchDude.Factory.CreateCouchApi(System.Uri,CouchDude.Http.IHttpClient)">
            <summary>Creates new <see cref="T:CouchDude.IDatabaseApi"/> instance associated with provided server address using <paramref name="httpClient"/> if provided.</summary>
        </member>
        <member name="T:CouchDude.ILuceneQueryResult`1">
            <summary>Typed CouchDB view query result.</summary>
        </member>
        <member name="T:CouchDude.ILuceneQueryResult">
            <summary>CouchDB view query result.</summary>
        </member>
        <member name="T:CouchDude.IQueryResult`1">
            <summary>Query result.</summary>
        </member>
        <member name="P:CouchDude.IQueryResult`1.Count">
            <summary>Numbre of items in result.</summary>
        </member>
        <member name="P:CouchDude.IQueryResult`1.TotalCount">
            <summary>Total count of items in query target.</summary>
        </member>
        <member name="P:CouchDude.IQueryResult`1.Offset">
            <summary>First result item offset in query target.</summary>
        </member>
        <member name="P:CouchDude.IQueryResult`1.Rows">
            <summary>Raw result data.</summary>
        </member>
        <member name="P:CouchDude.ILuceneQueryResult.FetchDuration">
            <summary>Time spent retrieving documents.</summary>
        </member>
        <member name="P:CouchDude.ILuceneQueryResult.SearchDuration">
            <summary>Time spent performing the search.</summary>
        </member>
        <member name="P:CouchDude.ILuceneQueryResult.Limit">
            <summary>Effective limit revised by couchdb-lucene.</summary>
        </member>
        <member name="P:CouchDude.ILuceneQueryResult.Skip">
            <summary>Number of initial matches skipped.</summary>
        </member>
        <member name="P:CouchDude.ILuceneQueryResult.Query">
            <summary>Query used to produce current results set.</summary>
        </member>
        <member name="P:CouchDude.ILuceneQueryResult.NextPageQuery">
            <summary>Returns next page query or <c>null</c> if instance represents last page of results.</summary>
        </member>
        <member name="T:CouchDude.IQueryResult`2">
            <summary>Typed query result.</summary>
        </member>
        <member name="T:CouchDude.ReplicationState">
            <summary>State of the replication process.</summary>
        </member>
        <member name="F:CouchDude.ReplicationState.None">
            <summary>Replication inactive.</summary>
        </member>
        <member name="F:CouchDude.ReplicationState.Triggered">
            <summary>Replication is in process.</summary>
        </member>
        <member name="F:CouchDude.ReplicationState.Completed">
            <summary>Replication have finished. Continuous replication never reaches this state.</summary>
        </member>
        <member name="F:CouchDude.ReplicationState.Error">
            <summary>Replication error have occured. See logs for details.</summary>
        </member>
        <member name="T:CouchDude.ReplicationTaskDescriptor">
            <summary>Describes replication task.</summary>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.Id">
            <summary>Identifier of the task. Should be unique.</summary>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.Revision">
            <summary>Task revision.</summary>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.Target">
            <summary>Replication target URI. Could be absolute for remote databases or relative for local.</summary>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.Source">
            <summary>Replication source URI. Could be absolute for remote databases or relative for local.</summary>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.Continuous">
            <summary>Indicates that replication should go on forever.</summary>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.UserContext">
            <summary>User context to perform replication under.</summary>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.CreateTarget">
            <summary>Requests target to be created if does not exists.</summary>
            <remarks>Does not work in CouchDB v.1.1.0</remarks>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.ReplicationId">
            <summary>Internal replication ID. Should be same for descriptors referring same <see cref="P:CouchDude.ReplicationTaskDescriptor.Target"/>/<see cref="P:CouchDude.ReplicationTaskDescriptor.Source"/> pair.</summary>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.ReplicationState">
            <summary>Current state of the replication process.</summary>
        </member>
        <member name="P:CouchDude.ReplicationTaskDescriptor.ReplicationStartTime">
            <summary>Time replication have started.</summary>
        </member>
        <member name="T:CouchDude.ReplicationUserContext">
            <summary>Replication user context descriptor.</summary>
        </member>
        <member name="P:CouchDude.ReplicationUserContext.Name">
            <summary>User name.</summary>
        </member>
        <member name="P:CouchDude.ReplicationUserContext.Roles">
            <summary>User's roles.</summary>
        </member>
        <member name="T:CouchDude.Utils.CheckIf">
            <summary>Commonly used checks.</summary>
        </member>
        <member name="M:CouchDude.Utils.CheckIf.DatabaseNameIsOk(System.String,System.String)">
            <summary>Checks if database name is valid.</summary>
        </member>
        <member name="T:CouchDude.Impl.SynchronousSessionMethods">
            <summary>Synchronous query methods for <see cref="T:CouchDude.ISession"/>.</summary>
        </member>
        <member name="T:CouchDude.ISynchronousSessionMethods">
            <summary>CouchDB session synchronous methods interface.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousSessionMethods.Query``1(CouchDude.ViewQuery)">
            <summary>Queries CouchDB view, returning  paged list of  ether documents or view data items waiting for result.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousSessionMethods.QueryLucene``1(CouchDude.LuceneQuery)">
            <summary>Queries lucene-couchdb index waiting for the result.</summary>
        </member>
        <member name="M:CouchDude.ISynchronousSessionMethods.Load``1(System.String)">
            <summary>Loads entity from CouchDB placing in to first level cache.</summary>
        </member>
        <member name="M:CouchDude.Impl.SynchronousSessionMethods.#ctor(CouchDude.ISession)">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.SynchronousSessionMethods.Query``1(CouchDude.ViewQuery)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.SynchronousSessionMethods.QueryLucene``1(CouchDude.LuceneQuery)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.SynchronousSessionMethods.Load``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.IQuery">
            <summary>CouchDB query common members.</summary>
        </member>
        <member name="M:CouchDude.IQuery.ToUri">
            <summary>Expreses query as relative URI.</summary>
        </member>
        <member name="M:CouchDude.IQuery.ToString">
            <summary>Expreses query as relative URI string.</summary>
        </member>
        <member name="P:CouchDude.IQuery.DesignDocumentName">
            <summary>Design document name (id without '_design/' prefix) to use view from.</summary>
        </member>
        <member name="P:CouchDude.IQuery.IncludeDocs">
            <summary>Indicates that we need documents from couchdb in result.</summary>
        </member>
        <member name="P:CouchDude.IQuery.Limit">
            <summary>Maximum rows should be returned from database.</summary>
        </member>
        <member name="P:CouchDude.IQuery.Skip">
            <summary>Rows should be skipped before first being returned.</summary>
        </member>
        <member name="T:CouchDude.IQueryResultRow">
            <summary>Common interface of query result row.</summary>
        </member>
        <member name="P:CouchDude.IQueryResultRow.Value">
            <summary>Query row main value.</summary>
        </member>
        <member name="P:CouchDude.IQueryResultRow.DocumentId">
            <summary>Document ID associated with row.</summary>
        </member>
        <member name="P:CouchDude.IQueryResultRow.Document">
            <summary>Document associated with the row.</summary>
        </member>
        <member name="T:CouchDude.IViewQueryResult`1">
            <summary>Typed CouchDB view query result.</summary>
        </member>
        <member name="T:CouchDude.IViewQueryResult">
            <summary>CouchDB view query result.</summary>
        </member>
        <member name="P:CouchDude.IViewQueryResult.Query">
            <summary>Query used to produce current results set.</summary>
        </member>
        <member name="P:CouchDude.IViewQueryResult.NextPageQuery">
            <summary>Returns next page view query or <c>null</c> if instance represents last page of results.</summary>
        </member>
        <member name="T:CouchDude.Impl.LuceneQueryResult">
            <summary>CouchDB view query result class.</summary>
        </member>
        <member name="T:CouchDude.Impl.QueryResult`1">
            <summary>Base class for untyped query results.</summary>
        </member>
        <member name="M:CouchDude.Impl.QueryResult`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32)">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.QueryResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <constructor />
        </member>
        <member name="P:CouchDude.Impl.QueryResult`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.QueryResult`1.TotalCount">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.QueryResult`1.Offset">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.QueryResult`1.Rows">
            <inheritdoc/>
        </member>
        <member name="F:CouchDude.Impl.LuceneQueryResult.Empty">
            <summary>Empty query result.</summary>
        </member>
        <member name="M:CouchDude.Impl.LuceneQueryResult.#ctor(CouchDude.LuceneQuery,System.Collections.Generic.ICollection{CouchDude.LuceneResultRow},System.Int32,System.Int32,System.TimeSpan,System.TimeSpan,System.Int32,System.Int32)">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.LuceneQueryResult.#ctor(CouchDude.LuceneQuery,System.Collections.Generic.IEnumerable{CouchDude.LuceneResultRow},System.Int32,System.Int32,System.Int32,System.TimeSpan,System.TimeSpan,System.Int32,System.Int32)">
            <constructor />
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult.Query">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult.NextPageQuery">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult.FetchDuration">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult.SearchDuration">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult.Limit">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult.Skip">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Impl.LuceneQueryResult`1">
            <summary>Typed CouchDB view query result class.</summary>
        </member>
        <member name="T:CouchDude.Impl.QueryResult`2">
            <summary>Base class for typed query results.</summary>
        </member>
        <member name="M:CouchDude.Impl.QueryResult`2.#ctor(System.Collections.Generic.ICollection{`1},System.Int32,System.Int32,System.Func{System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`0}})">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.QueryResult`2.#ctor(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Int32,System.Int32,System.Func{System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`0}})">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.QueryResult`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.QueryResult`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="F:CouchDude.Impl.LuceneQueryResult`1.Empty">
            <summary>Empty query result.</summary>
        </member>
        <member name="M:CouchDude.Impl.LuceneQueryResult`1.#ctor(CouchDude.LuceneQuery,System.Collections.Generic.ICollection{CouchDude.LuceneResultRow},System.Int32,System.Int32,System.TimeSpan,System.TimeSpan,System.Int32,System.Int32,System.Func{System.Collections.Generic.IEnumerable{CouchDude.LuceneResultRow},System.Collections.Generic.IEnumerable{`0}})">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.LuceneQueryResult`1.#ctor(CouchDude.LuceneQuery,System.Collections.Generic.IEnumerable{CouchDude.LuceneResultRow},System.Int32,System.Int32,System.Int32,System.TimeSpan,System.TimeSpan,System.Int32,System.Int32,System.Func{System.Collections.Generic.IEnumerable{CouchDude.LuceneResultRow},System.Collections.Generic.IEnumerable{`0}})">
            <constructor />
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult`1.Query">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult`1.NextPageQuery">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult`1.FetchDuration">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult`1.SearchDuration">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult`1.Limit">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.LuceneQueryResult`1.Skip">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Impl.LuceneQueryUriConverter">
            <summary>Converts <see cref="T:CouchDude.LuceneQuery"/> to <see cref="T:System.Uri"/>, <see cref="T:System.String"/> and back.</summary>
        </member>
        <member name="M:CouchDude.Impl.LuceneQueryUriConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.LuceneQueryUriConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.LuceneQueryUriConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.LuceneQueryUriConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Impl.QueryResultExtensions">
            <summary>Extension methods for <see cref="T:CouchDude.IQueryResult`2"/> descendants.</summary>
        </member>
        <member name="M:CouchDude.Impl.QueryResultExtensions.OfType``1(CouchDude.ILuceneQueryResult,System.Func{System.Collections.Generic.IEnumerable{CouchDude.LuceneResultRow},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Converts untyped query result ot typed one.</summary>
        </member>
        <member name="M:CouchDude.Impl.QueryResultExtensions.OfType``1(CouchDude.IViewQueryResult,System.Func{System.Collections.Generic.IEnumerable{CouchDude.ViewResultRow},System.Collections.Generic.IEnumerable{``0}})">
            <summary>Converts untyped query result ot typed one.</summary>
        </member>
        <member name="T:CouchDude.LuceneSort">
            <summary>Lucene query result sort order.</summary>
        </member>
        <member name="F:CouchDude.LuceneSort.FieldName">
            <summary>Name of feild to sort on</summary>
        </member>
        <member name="F:CouchDude.LuceneSort.SortDescending">
            <summary>Sort order</summary>
        </member>
        <member name="F:CouchDude.LuceneSort.Type">
            <summary>Sort ordering type</summary>
        </member>
        <member name="M:CouchDude.LuceneSort.#ctor(System.String,System.Boolean,System.Nullable{CouchDude.LuceneType})">
            <contructor/>
        </member>
        <member name="M:CouchDude.LuceneSort.TryParse(System.String,CouchDude.LuceneSort@)">
            <summary>Attemps to parse sort descriptor.</summary>
        </member>
        <member name="M:CouchDude.LuceneSort.ToString">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.LuceneType">
            <summary>Types supported by Lucene engine.</summary>
        </member>
        <member name="F:CouchDude.LuceneType.Float">
            <summary>Single persision fload-point number.</summary>
        </member>
        <member name="F:CouchDude.LuceneType.Double">
            <summary>Double persision fload-point number.</summary>
        </member>
        <member name="F:CouchDude.LuceneType.Int">
            <summary>Single persision integer number.</summary>
        </member>
        <member name="F:CouchDude.LuceneType.Long">
            <summary>Double persision integer number.</summary>
        </member>
        <member name="F:CouchDude.LuceneType.Date">
            <summary>Date/time number.</summary>
        </member>
        <member name="T:CouchDude.Utils.ExceptionUtils">
            <summary><see cref="T:System.Exception"/>-related utilities.</summary>
        </member>
        <member name="M:CouchDude.Utils.ExceptionUtils.PreserveStackTrace(System.Exception)">
            <summary>Makes sure exception stack trace would not be modify on rethrow.</summary>
        </member>
        <member name="M:CouchDude.Utils.ExceptionUtils.Extract(System.AggregateException)">
            <summary>Extracts single inner exception or flatterned <see cref="T:System.AggregateException"/>.</summary>
        </member>
        <member name="T:CouchDude.Utils.OptionListSerializer`1">
            <summary>Query-string serializable object (de)serializer.</summary>
        </member>
        <member name="T:CouchDude.Utils.TaskUtils">
            <summary><see cref="T:System.Threading.Tasks.Task"/> utility methods.</summary>
        </member>
        <member name="M:CouchDude.Utils.TaskUtils.WaitForResult(System.Threading.Tasks.Task)">
            <summary>Waits for result of the task returning it result.</summary>
        </member>
        <member name="M:CouchDude.Utils.TaskUtils.WaitForResult``1(System.Threading.Tasks.Task{``0})">
            <summary>Waits for result of the task returning it result.</summary>
        </member>
        <member name="T:CouchDude.ConventionException">
            <summary> Convention exception.</summary>
        </member>
        <member name="M:CouchDude.ConventionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ConventionException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.ConventionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.ConventionException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.ConventionException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.ConventionException"/> class.</summary>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.ConventionException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ConventionException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.ConventionException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ConventionException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CouchDude.ConventionException.#ctor(System.Exception,System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ConventionException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:CouchDude.ConfigurationException">
            <summary> Configuration exception.</summary>
        </member>
        <member name="M:CouchDude.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ConfigurationException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.ConfigurationException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.ConfigurationException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.ConfigurationException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.ConfigurationException"/> class.</summary>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.ConfigurationException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ConfigurationException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.ConfigurationException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ConfigurationException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CouchDude.ConfigurationException.#ctor(System.Exception,System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ConfigurationException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:CouchDude.DocumentIdMissingException">
            <summary>Exception thrown in case of missing _id property on CouchDB document.</summary>
        </member>
        <member name="T:CouchDude.ParseException">
            <summary> Parse exception.</summary>
        </member>
        <member name="M:CouchDude.ParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ParseException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.ParseException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.ParseException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.ParseException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.ParseException"/> class.</summary>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.ParseException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ParseException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.ParseException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ParseException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CouchDude.ParseException.#ctor(System.Exception,System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.ParseException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.DocumentIdMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.DocumentIdMissingException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.DocumentIdMissingException.#ctor(CouchDude.IDocument)">
            <constructor />
        </member>
        <member name="T:CouchDude.DocumentRevisionMissingException">
            <summary>Exception thrown in case of missing _rev property on
            CouchDB document.</summary>
        </member>
        <member name="M:CouchDude.DocumentRevisionMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <constructor />
        </member>
        <member name="M:CouchDude.DocumentRevisionMissingException.#ctor(CouchDude.IDocument)">
            <constructor />
        </member>
        <member name="T:CouchDude.DocumentTypeMissingException">
            <summary>Exception thrown in case of missing type property on
            CouchDB document.</summary>
        </member>
        <member name="M:CouchDude.DocumentTypeMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.DocumentTypeMissingException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.DocumentTypeMissingException.#ctor(CouchDude.IDocument)">
            <constructor />
        </member>
        <member name="T:CouchDude.DocumentTypeNotRegistredException">
            <summary>Thrown in case of unregistred document type.</summary>
        </member>
        <member name="M:CouchDude.DocumentTypeNotRegistredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.EntityTypeMismatchException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.DocumentTypeNotRegistredException.#ctor(System.String)">
            <constructor />
        </member>
        <member name="T:CouchDude.EntityTypeNotRegistredException">
            <summary>Thrown in case of unregistred entity type.</summary>
        </member>
        <member name="M:CouchDude.EntityTypeNotRegistredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.EntityTypeMismatchException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.EntityTypeNotRegistredException.#ctor(System.Type)">
            <constructor />
        </member>
        <member name="T:CouchDude.DocumentNotFoundException">
            <summary>Thrown in case of unregistred entity type.</summary>
        </member>
        <member name="M:CouchDude.DocumentNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.EntityTypeMismatchException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.DocumentNotFoundException.#ctor(System.String,System.String)">
            <constructor />
        </member>
        <member name="T:CouchDude.StaleObjectStateException">
            <summary> StaleObjectState exception.</summary>
        </member>
        <member name="M:CouchDude.StaleObjectStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.StaleObjectStateException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.StaleObjectStateException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.StaleObjectStateException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.StaleObjectStateException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.StaleObjectStateException"/> class.</summary>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.StaleObjectStateException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.StaleObjectStateException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.StaleObjectStateException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.StaleObjectStateException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CouchDude.StaleObjectStateException.#ctor(System.Exception,System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.StaleObjectStateException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:CouchDude.EntityTypeMismatchException">
            <summary> EntityTypeMismatch exception.</summary>
        </member>
        <member name="M:CouchDude.EntityTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.EntityTypeMismatchException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.EntityTypeMismatchException.#ctor(System.String,System.Type)">
            <constructor />
        </member>
        <member name="M:CouchDude.EntityTypeMismatchException.#ctor(System.Type,System.Type)">
            <constructor />
        </member>
        <member name="T:CouchDude.IEntityConfigRepository">
            <summary>Entity configuration</summary>
        </member>
        <member name="M:CouchDude.IEntityConfigRepository.GetConfig(System.Type)">
            <summary>Retrives entity configuration by entity type.</summary>
        </member>
        <member name="M:CouchDude.IEntityConfigRepository.TryGetConfig(System.Type)">
            <summary>Retrives entity configuration by entity type returning <c>null</c> if none found.</summary>
        </member>
        <member name="M:CouchDude.IEntityConfigRepository.GetConfig(System.String)">
            <summary>Retrives entity configuration by document type.</summary>
        </member>
        <member name="M:CouchDude.IEntityConfigRepository.GetAllRegistredBaseTypes(System.Type)">
            <summary>Retrunes all registred base type of provided one plus the 
            type itself.</summary>
        </member>
        <member name="T:CouchDude.LuceneResultRow">
            <summary>CouchDB-lucene query result row.</summary>
        </member>
        <member name="M:CouchDude.LuceneResultRow.#ctor">
            <constructor />
        </member>
        <member name="M:CouchDude.LuceneResultRow.#ctor(System.String,CouchDude.IJsonFragment,System.Decimal,System.String,CouchDude.IDocument)">
            <constructor />
        </member>
        <member name="P:CouchDude.LuceneResultRow.Id">
            <summary>The unique identifier for this match.</summary>
        </member>
        <member name="P:CouchDude.LuceneResultRow.Score">
            <summary>The normalized score (0.0-1.0, inclusive) for this match.</summary>
        </member>
        <member name="P:CouchDude.LuceneResultRow.Fields">
            <summary>All the fields that were stored with this match</summary>
        </member>
        <member name="P:CouchDude.LuceneResultRow.DocumentId">
            <summary>Document ID associated with view row.</summary>
        </member>
        <member name="P:CouchDude.LuceneResultRow.Document">
            <summary>Document associated with the row.</summary>
        </member>
        <member name="T:CouchDude.Http.HttpClientHelpers">
            <summary>Extension methods for <see cref="N:System.Net.Http"/> API.</summary>
        </member>
        <member name="M:CouchDude.Http.HttpClientHelpers.GetContentTextReader(System.Net.Http.HttpResponseMessage)">
            <summary>Constructs text reader over message content using response's encoding info.</summary>
        </member>
        <member name="M:CouchDude.Http.HttpClientHelpers.SetStringContent(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>Populates request message with text data form provided string.</summary>
        </member>
        <member name="M:CouchDude.Http.HttpClientHelpers.GetTextReader(System.Net.Http.HttpContent)">
            <summary>Constructs text reader over HTTP content using response's encoding info.</summary>
        </member>
        <member name="T:CouchDude.Http.HttpClientImpl">
            <summary><see cref="T:CouchDude.Http.IHttpClient"/> implementation using 
            <see cref="T:System.Net.HttpWebRequest"/>/<see cref="T:System.Net.HttpWebResponse"/>.</summary>
        </member>
        <member name="T:CouchDude.Http.IHttpClient">
            <summary>HTTP client abstracted interface.</summary>
        </member>
        <member name="M:CouchDude.Http.IHttpClient.StartRequest(System.Net.Http.HttpRequestMessage)">
            <summary>Starts HTTP request and returs task.</summary>
        </member>
        <member name="M:CouchDude.Http.IHttpClient.MakeRequest(System.Net.Http.HttpRequestMessage)">
            <summary>Makes HTTP request and waits for result.</summary>
        </member>
        <member name="M:CouchDude.Http.HttpClientImpl.MakeRequest(System.Net.Http.HttpRequestMessage)">
            <summary>Makes HTTP request and waits for result.</summary>
        </member>
        <member name="M:CouchDude.Http.HttpClientImpl.StartRequest(System.Net.Http.HttpRequestMessage)">
            <summary>Starts HTTP request and returs task.</summary>
        </member>
        <member name="M:CouchDude.Http.HttpClientImpl.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.IDatabaseApi">
            <summary>Represents low-level CouchDB API.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.RequestDocument(System.String,System.String)">
            <summary>Requests CouchDB for document using <paramref name="documentId"/> 
            and <paramref name="revision"/>.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.SaveDocument(CouchDude.IDocument)">
            <summary>Saves new document to CouchDB.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.CopyDocument(System.String,System.String,System.String,System.String)">
            <summary>Creates new document by copying another document's content.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.RequestAttachment(System.String,System.String,System.String)">
            <summary>Requests document attachment directly from database.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.SaveAttachment(CouchDude.IDocumentAttachment,System.String,System.String)">
            <summary>Saves document attachment directly to database. If <paramref name="documentRevision"/> is <c>null</c>
            creates new document for attachment.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.DeleteAttachment(System.String,System.String,System.String)">
            <summary>Requests document attachment directly from database.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.RequestLastestDocumentRevision(System.String)">
            <summary>Retrives current document revision from CouchDB. </summary>
            <remarks><c>null</c> returned if there is no such document in database.</remarks>
        </member>
        <member name="M:CouchDude.IDatabaseApi.DeleteDocument(System.String,System.String)">
            <summary>Deletes document of provided <paramref name="documentId"/> if it's revision
            is equal to provided <paramref name="revision"/> from CouchDB.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.Query(CouchDude.ViewQuery)">
            <summary>Queries CouchDB view.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.QueryLucene(CouchDude.LuceneQuery)">
            <summary>Queries couchdb-lucene index.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.BulkUpdate(System.Action{CouchDude.IBulkUpdateBatch})">
            <summary>Creates, updates and deletes several documents as a whole in CouchDB. </summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.Create">
            <summary>Demands database to be created.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.Delete">
            <summary>Demands database to be deleted.</summary>
        </member>
        <member name="M:CouchDude.IDatabaseApi.RequestInfo">
            <summary>Demands database status information.</summary>
        </member>
        <member name="P:CouchDude.IDatabaseApi.Synchronously">
            <summary>Synchronous version of databes-level APIs.</summary>
        </member>
        <member name="M:CouchDude.Api.DatabaseApi.#ctor(CouchDude.Http.IHttpClient,CouchDude.Api.DbUriConstructor)">
            <constructor />
        </member>
        <member name="T:CouchDude.Impl.CouchSessionFactory">
            <summary>Session factory implementation.</summary>
        </member>
        <member name="T:CouchDude.ISessionFactory">
            <summary>Factory object for <see cref="T:CouchDude.ISession"/> object.</summary>
        </member>
        <member name="M:CouchDude.ISessionFactory.CreateSession">
            <summary>Creates session.</summary>
        </member>
        <member name="M:CouchDude.ISessionFactory.CreateSession(System.String)">
            <summary>Creates session targeting non-default database.</summary>
        </member>
        <member name="M:CouchDude.Impl.CouchSessionFactory.#ctor(CouchDude.Settings,CouchDude.ICouchApi)">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.CouchSessionFactory.CreateSession">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSessionFactory.CreateSession(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Impl.CouchSession">
            <summary>Session implementation.</summary>
            <summary>Session implementation.</summary>
        </member>
        <member name="T:CouchDude.ISession">
            <summary>CouchDB session interface.</summary>
        </member>
        <member name="M:CouchDude.ISession.Save``1(``0[])">
            <summary>Attaches entities to the session, assigning it an identifier if needed.</summary>
            <remarks>No changes to database are made until <see cref="M:CouchDude.ISession.StartSavingChanges"/> is called.</remarks>
        </member>
        <member name="M:CouchDude.ISession.Delete``1(``0[])">
            <summary>Marks provided enties for deletion from CouchDB.</summary>
            <remarks>No changes to databas are made until <see cref="M:CouchDude.ISession.StartSavingChanges"/> is called.</remarks>
        </member>
        <member name="M:CouchDude.ISession.Save``1(``0)">
            <summary>Attaches entity to the session, assigning it an identifier if needed.</summary>
            <remarks>No changes to database are made until <see cref="M:CouchDude.ISession.StartSavingChanges"/> is called.</remarks>
        </member>
        <member name="M:CouchDude.ISession.Delete``1(``0)">
            <summary>Marks provided entity for deletion from CouchDB.</summary>
            <remarks>No changes to databas are made until <see cref="M:CouchDude.ISession.StartSavingChanges"/> is called.</remarks>
        </member>
        <member name="M:CouchDude.ISession.Load``1(System.String)">
            <summary>Loads entity from CouchDB placing in to first level cache.</summary>
        </member>
        <member name="M:CouchDude.ISession.Query``1(CouchDude.ViewQuery)">
            <summary>Queries CouchDB view, returning  paged list of  ether documents or view data items.</summary>
        </member>
        <member name="M:CouchDude.ISession.QueryLucene``1(CouchDude.LuceneQuery)">
            <summary>Queries lucene-couchdb index.</summary>
        </member>
        <member name="M:CouchDude.ISession.StartSavingChanges">
            <summary>Starts "save all changes to CouchDB" process returning immediately.</summary>
        </member>
        <member name="M:CouchDude.ISession.SaveChanges">
            <summary>Saves all changes to CouchDB and waites for result.</summary>
        </member>
        <member name="P:CouchDude.ISession.Synchronously">
            <summary>Synchronous session methods.</summary>
        </member>
        <member name="P:CouchDude.ISession.RawApi">
            <summary>Exposes raw CouchDB APIs.</summary>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.#ctor(CouchDude.Settings,CouchDude.ICouchApi)">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.CouchSession.#ctor(System.String,CouchDude.Settings,CouchDude.ICouchApi)">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.CouchSession.Save``1(``0[])">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.Save``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.Delete``1(``0[])">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.Delete``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.Load``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.StartSavingChanges">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.SaveChanges">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.Finalize">
            <summary>Backup plan finalizer - use Dispose() method!</summary>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.QueryLucene``1(CouchDude.LuceneQuery)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.CouchSession.Query``1(CouchDude.ViewQuery)">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.CouchSession.Synchronously">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.CouchSession.RawApi">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.DesignDocumentAssemblerException">
            <summary> DesignDocumentAssembler exception.</summary>
        </member>
        <member name="M:CouchDude.DesignDocumentAssemblerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.DesignDocumentAssemblerException"/> class.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the 
            serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains 
            contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> 
            parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="M:CouchDude.DesignDocumentAssemblerException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.DesignDocumentAssemblerException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:CouchDude.DesignDocumentAssemblerException.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:CouchDude.DesignDocumentAssemblerException"/> class.</summary>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.DesignDocumentAssemblerException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.DesignDocumentAssemblerException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="messageParams">The message params.</param>
        </member>
        <member name="M:CouchDude.DesignDocumentAssemblerException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.DesignDocumentAssemblerException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:CouchDude.DesignDocumentAssemblerException.#ctor(System.Exception,System.String)">
            <summary>Initializes a new instance of the 
            <see cref="T:CouchDude.DesignDocumentAssemblerException"/> class.</summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:CouchDude.Impl.DocumentEntity">
            <summary>Represents CouchDB document - entity relationship.</summary>
        </member>
        <member name="F:CouchDude.Impl.DocumentEntity.entityConfiguration">
            <summary>Document entity configuration.</summary>
        </member>
        <member name="M:CouchDude.Impl.DocumentEntity.GetEntity``1">
            <summary>Return entity casted to specified type.</summary>
        </member>
        <member name="M:CouchDude.Impl.DocumentEntity.WriteTo(System.IO.TextWriter)">
            <summary>Writes document to provided text writer.</summary>
            <remarks>Caller is responsible for disposing <paramref name="writer"/>.</remarks>
        </member>
        <member name="M:CouchDude.Impl.DocumentEntity.FromEntity(System.Object,CouchDude.IEntityConfigRepository)">
            <summary>Creates instance from entity.</summary>
        </member>
        <member name="M:CouchDude.Impl.DocumentEntity.TryFromDocument(CouchDude.IDocument,CouchDude.IEntityConfigRepository)">
            <summary>Creates entity/document pair from CouchDB document. If any error does occur returns <c>null</c>.</summary>
        </member>
        <member name="M:CouchDude.Impl.DocumentEntity.FromDocument(CouchDude.IDocument,CouchDude.IEntityConfigRepository)">
            <summary>Creates entity/document pair from CouchDB document.</summary>
        </member>
        <member name="M:CouchDude.Impl.DocumentEntity.DoMap">
            <summary>Maps entity to the JSON document.</summary>
        </member>
        <member name="M:CouchDude.Impl.DocumentEntity.MapIfChanged">
            <summary>Activly checks if entity is differ then JSON document.</summary>
        </member>
        <member name="P:CouchDude.Impl.DocumentEntity.EntityId">
            <summary>Entity identitifier.</summary>
        </member>
        <member name="P:CouchDude.Impl.DocumentEntity.DocumentId">
            <summary>Document identitifier.</summary>
        </member>
        <member name="P:CouchDude.Impl.DocumentEntity.Revision">
            <summary>Currently loaded revision of the document/entity.</summary>
            <remarks>First source of truth is always entity.</remarks>
        </member>
        <member name="P:CouchDude.Impl.DocumentEntity.EntityType">
            <summary>Type of the entity bound to the document.</summary>
        </member>
        <member name="P:CouchDude.Impl.DocumentEntity.DocumentType">
            <summary>Document property type string.</summary>
        </member>
        <member name="P:CouchDude.Impl.DocumentEntity.Entity">
            <summary>Entity instance.</summary>
        </member>
        <member name="P:CouchDude.Impl.DocumentEntity.HavePersisted">
            <summary>Idicates if entity have been persisted.</summary>
        </member>
        <member name="P:CouchDude.Impl.DocumentEntity.HaveRemoved">
            <summary>Idicates if entity have been deleted.</summary>
        </member>
        <member name="P:CouchDude.Impl.DocumentEntity.Document">
            <summary>Database raw document.</summary>
        </member>
        <member name="T:CouchDude.Impl.SessionUnitOfWork">
            <summary>Unit of work for CRUD implementation for <see cref="T:CouchDude.ISession"/>.</summary>
            <remarks>Instance methods are not thread safe. Instance should be protected before 
            accessing in parallel.</remarks>
        </member>
        <member name="M:CouchDude.Impl.SessionUnitOfWork.#ctor(CouchDude.IEntityConfigRepository)">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.SessionUnitOfWork.Attach(System.Object,System.Boolean)">
            <summary>Attaches already persisted document entity to the unit.</summary>
        </member>
        <member name="M:CouchDude.Impl.SessionUnitOfWork.AddNew(System.Object)">
            <summary>Adds new document entity (without document part actually) to the unit.</summary>
        </member>
        <member name="M:CouchDude.Impl.SessionUnitOfWork.MarkAsRemoved(System.Object)">
            <summary>Marks document entity as deleted from the store forsing other <see cref="T:CouchDude.Impl.SessionUnitOfWork"/> methods
            to behave as if it have been already removed.</summary>
        </member>
        <member name="M:CouchDude.Impl.SessionUnitOfWork.ApplyChanges(CouchDude.IBulkUpdateBatch)">
            <summary>Translates session unit of work to CouchApi bulk update unit of work.</summary>
        </member>
        <member name="M:CouchDude.Impl.SessionUnitOfWork.TryGetByDocumentId(System.String,System.Object@)">
            <summary>Attempts to retrive cached entity by it's documentID (withch shoud be unique)</summary>
        </member>
        <member name="M:CouchDude.Impl.SessionUnitOfWork.UpdateWithDocument(CouchDude.IDocument)">
            <summary>Updates cache with provided document.</summary>
        </member>
        <member name="M:CouchDude.Impl.SessionUnitOfWork.GetDocumentEntity(System.Object)">
            <summary>Maps entity to document entity using unit of work cache.</summary>
        </member>
        <member name="T:CouchDude.Configuration.Builders.EntityConfigBuilder`1">
            <summary>Entity configuration class builder.</summary>
        </member>
        <member name="T:CouchDude.Configuration.Builders.SettingsBuilderDetour">
            <summary>Base class for sub-builders.</summary>
        </member>
        <member name="F:CouchDude.Configuration.Builders.SettingsBuilderDetour.Parent">
            <summary>Parent builder.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilderDetour.#ctor(CouchDude.Configuration.Builders.SettingsBuilder)">
            <constructor />
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilderDetour.CreateSettings">
            <summary>Geterates settings object.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilderDetour.MappingEntities">
            <summary>Starts new process of mapping group of similar entites.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilderDetour.MappingEntitiy``1">
            <summary>Starts process of mapping single entity.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilderDetour.MappingEntitiy(System.Type)">
            <summary>Starts process of mapping single entity.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilderDetour.Flush">
            <summary>Saves all collected configuration to parent.</summary>
        </member>
        <member name="F:CouchDude.Configuration.Builders.EntityConfigBuilder`1.Predicates">
            <summary>Entities to attach config to restrictions.</summary>
        </member>
        <member name="F:CouchDude.Configuration.Builders.EntityConfigBuilder`1.AssembliesToScan">
            <summary>Assemblies to be scaned in search of entities to assign build confg to.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityConfigBuilder`1.#ctor(CouchDude.Configuration.Builders.SettingsBuilder)">
            <constructor />
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityConfigBuilder`1.WhenDocumentType(CouchDude.Configuration.EntityTypeToDocumentTypeConvention)">
            <summary>Sets entity type to document type convention.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityConfigBuilder`1.TranslatingDocumentIdToEntityIdAs(CouchDude.Configuration.DocumentIdToEntityIdConvention)">
            <summary>Sets entity type to document type convention.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityConfigBuilder`1.TranslatingEntityIdToDocumentIdAs(CouchDude.Configuration.EntityIdToDocumentIdConvention)">
            <summary>Sets entity type to document type convention.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityConfigBuilder`1.WhenIdMember(System.Func{System.Type,System.Reflection.MemberInfo})">
            <summary>Sets entity type to document type convention.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityConfigBuilder`1.WhenRevisionMember(System.Func{System.Type,System.Reflection.MemberInfo})">
            <summary>Sets entity type to document type convention.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityConfigBuilder`1.WithCustomConfig(System.Func{System.Type,CouchDude.Configuration.IEntityConfig})">
            <summary>Registers custom <see cref="T:CouchDude.Configuration.IEntityConfig"/> factory and returs user to parent builder.</summary>
            <remarks>This discards all previous <see cref="T:CouchDude.Configuration.IEntityConfig"/> settings.</remarks>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityConfigBuilder`1.Flush">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Configuration.Builders.EntityListConfigBuilder">
            <summary>Helps <see cref="T:CouchDude.Configuration.Builders.SettingsBuilder"/> to build list of entity config class.</summary>
        </member>
        <member name="T:CouchDude.Configuration.Builders.EntityListConfigBuilder`1">
            <summary>Helps <see cref="T:CouchDude.Configuration.Builders.SettingsBuilder"/> to build list of entity config class.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityListConfigBuilder`1.#ctor(CouchDude.Configuration.Builders.SettingsBuilder)">
            <constructor />
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityListConfigBuilder`1.FromAssemblyOf``1">
            <summary>Adds assembly where provided type is declared to entity classes scan list.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityListConfigBuilder`1.FromAssembly(System.String)">
            <summary>Adds assembly of provided name to entity classes scan list.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityListConfigBuilder`1.InheritedFrom``1">
            <summary>Adds base class restriction for found entity types.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityListConfigBuilder`1.Implementing``1">
            <summary>Restricts entities to ones inherited from <typeparamref name="T"/>.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityListConfigBuilder`1.Where(System.Predicate{System.Type})">
            <summary>Adds custom entity type search predicate.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.EntityListConfigBuilder.#ctor(CouchDude.Configuration.Builders.SettingsBuilder)">
            <constructor />
        </member>
        <member name="T:CouchDude.Configuration.Builders.SingleEntityConfigBuilder">
            <summary>Helper builder for <see cref="T:CouchDude.Configuration.Builders.SettingsBuilder"/></summary>
        </member>
        <member name="T:CouchDude.Configuration.Builders.SingleEntityConfigBuilder`1">
            <summary>Helper builder for <see cref="T:CouchDude.Configuration.Builders.SettingsBuilder"/></summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SingleEntityConfigBuilder`1.#ctor(System.Type,CouchDude.Configuration.Builders.SettingsBuilder)">
            <constructor />
        </member>
        <member name="M:CouchDude.Configuration.Builders.SingleEntityConfigBuilder.#ctor(System.Type,CouchDude.Configuration.Builders.SettingsBuilder)">
            <constructor />
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that method doesn't contain observable side effects.
            The same as <see cref="T:System.Diagnostics.Contracts.PureAttribute"/>
            </summary>
        </member>
        <member name="T:CouchDude.Utils.StringUtils">
            <summary>Utility methods for string manipulation.</summary>
        </member>
        <member name="M:CouchDude.Utils.StringUtils.ToCamelCase(System.String)">
            <summary>Converts first letter of the string to </summary>
        </member>
        <member name="M:CouchDude.Utils.StringUtils.HasNoValue(System.String)">
            <summary>Inverts <see cref="M:System.String.IsNullOrEmpty(System.String)"/> to be more convinient.</summary>
        </member>
        <member name="M:CouchDude.Utils.StringUtils.HasValue(System.String)">
            <summary>Inverts <see cref="M:System.String.IsNullOrEmpty(System.String)"/> and negates it to be more convinient.</summary>
        </member>
        <member name="T:CouchDude.Utils.UriUtils">
            <summary><see cref="T:System.Uri"/>-related utility class.</summary>
        </member>
        <member name="M:CouchDude.Utils.UriUtils.LeaveDotsAndSlashesEscaped(System.Uri)">
            <summary>Reverts default <see cref="T:System.Uri"/> behaviour of unescaping slashes and dots in path.</summary>
        </member>
        <member name="M:CouchDude.Utils.UriUtils.ParseQueryString(System.String)">
            <summary>Parses query string into dictionary.</summary>
        </member>
        <member name="T:CouchDude.ConfigureCouchDude">
            <summary>Start point of fluent configuration of CouchDude.</summary>
        </member>
        <member name="M:CouchDude.ConfigureCouchDude.With">
            <summary>Starts CouchDude configuration.</summary>
        </member>
        <member name="M:CouchDude.ConfigureCouchDude.GetService``1(System.IServiceProvider)">
            <summary>Retrives service from service provider using type argument.</summary>
        </member>
        <member name="T:CouchDude.Configuration.Builders.SettingsBuilder">
            <summary>Fluent interface for building of Settings instance.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.#ctor">
            <constructor />
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.#ctor(System.Predicate{System.Type})">
            <constructor />
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.ServerUri(System.Uri)">
            <summary>Sets CouchDB server URI.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.ServerUri(System.String)">
            <summary>Sets CouchDB server URI.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.DefaultDatabaseName(System.String)">
            <summary>Sets default database name to use.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.ConsumingServicesFrom(System.IServiceProvider)">
            <summary>Forces CouchDude to request services (in particular conventions) it needs from
            given <param name="serviceProvider"/> instance.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.MappingEntities">
            <summary>Starts process of mapping group of similar entites.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.MappingEntitiy``1">
            <summary>Starts process of mapping single entity.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.MappingEntitiy(System.Type)">
            <summary>Starts process of mapping single entity.</summary>
        </member>
        <member name="M:CouchDude.Configuration.Builders.SettingsBuilder.CreateSettings">
            <summary>Geterates settings object.</summary>
        </member>
        <member name="T:CouchDude.LuceneQuery">
            <summary>Fulltext query to couchdb-lucene</summary>
        </member>
        <member name="M:CouchDude.LuceneQuery.ToUri">
            <summary>Expreses query as relative URL.</summary>
        </member>
        <member name="M:CouchDude.LuceneQuery.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.LuceneQuery.Clone">
            <summary>Cretates copy of current clone.</summary>
        </member>
        <member name="M:CouchDude.LuceneQuery.Parse(System.Uri)">
            <summary>Parse view query from provided URI.</summary>
        </member>
        <member name="M:CouchDude.LuceneQuery.Parse(System.String)">
            <summary>Parse view query from provided URI.</summary>
        </member>
        <member name="M:CouchDude.LuceneQuery.TryParse(System.Uri,CouchDude.LuceneQuery@)">
            <summary>Attemps to parse view query from provided URI.</summary>
        </member>
        <member name="M:CouchDude.LuceneQuery.TryParse(System.String,CouchDude.LuceneQuery@)">
            <summary>Attemps to parse view query from provided URI string.</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.DesignDocumentName">
            <summary>Design document name (id without '_design/' prefix) to use view from.</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.IndexName">
            <summary>Index view name.</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.Query">
            <summary>Search query (see http://lucene.apache.org/java/2_4_0/queryparsersyntax.html) </summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.Analyzer">
            <summary>Name of analizer which is used for this query</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.Sort">
            <summary>Array of objects to sort on</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.Limit">
            <summary>How many documents will be returned</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.Skip">
            <summary>How many documents need to be skipped</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.SuppressCaching">
            <summary>Bypasses caching infrostructure of lucene-couchdb.</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.UseConjunctionSematics">
            <summary>Sets default operator for boolean queries to AND insted of OR.</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.IncludeDocs">
            <summary>Indicates that we need documents from couchdb in result</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.Fields">
            <summary>Stored fields to retrive. If <c>null</c> defaults to all.</summary>
        </member>
        <member name="P:CouchDude.LuceneQuery.DoNotBlockIfStale">
            <summary>If <c>true</c> couchdb-lucene will not block if the index is not up to date and it will immediately return results. 
            Therefore searches may be faster as Lucene caches important data (especially for sorting). 
            couchdb-lucene will trigger an index update unless one is already running.</summary>
        </member>
        <member name="T:CouchDude.ViewQuery">
            <summary>Describes CouchDB view query.</summary>
            <remarks>http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options</remarks>
        </member>
        <member name="M:CouchDude.ViewQuery.ToString">
            <summary>Gets query URI.</summary>
        </member>
        <member name="M:CouchDude.ViewQuery.ToUri">
            <summary>Gets query URI.</summary>
        </member>
        <member name="M:CouchDude.ViewQuery.Clone">
            <summary>Cretates copy of current clone.</summary>
        </member>
        <member name="M:CouchDude.ViewQuery.Parse(System.Uri)">
            <summary>Parse view query from provided URI.</summary>
        </member>
        <member name="M:CouchDude.ViewQuery.Parse(System.String)">
            <summary>Parse view query from provided URI.</summary>
        </member>
        <member name="M:CouchDude.ViewQuery.TryParse(System.Uri,CouchDude.ViewQuery@)">
            <summary>Attemps to parse view query from provided URI.</summary>
        </member>
        <member name="M:CouchDude.ViewQuery.TryParse(System.String,CouchDude.ViewQuery@)">
            <summary>Attemps to parse view query from provided URI string.</summary>
        </member>
        <member name="M:CouchDude.ViewQuery.Equals(CouchDude.ViewQuery)">
            <summary>Compares current instance with provided for equality.</summary>
        </member>
        <member name="M:CouchDude.ViewQuery.Equals(System.Object)">
            <summary>Compares current instance with provided for equality.</summary>
        </member>
        <member name="M:CouchDude.ViewQuery.GetHashCode">
            <summary>Computes hash code for current instance of query.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.DesignDocumentName">
            <summary>Design document name (id without '_design/' prefix) to use view from.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.ViewName">
            <summary>View name.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.Key">
            <summary>Key to fetch view rows by.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.StartKey">
            <summary>Key to start view result fetching from.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.StartDocumentId">
            <summary>Document id to start view result fetching from.</summary>
            <remarks>Should allways be used with <see cref="P:CouchDude.ViewQuery.StartKey"/>.</remarks>
        </member>
        <member name="P:CouchDude.ViewQuery.EndKey">
            <summary>Key to stop view result fetching by.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.EndDocumentId">
            <summary>Document id to stop view result fetching by.</summary>
            <remarks>Should allways be used with <see cref="P:CouchDude.ViewQuery.EndKey"/>.</remarks>
        </member>
        <member name="P:CouchDude.ViewQuery.Group">
            <summary>Flag that indicates that query should run multiple reduce</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.GroupLevel">
            <summary>Indicates level of grouping which used when query executed</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.Limit">
            <summary>Limit the number of view rows in the output.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.Skip">
            <summary>Sets number of view rows to skip when fetching.</summary>
            <remarks>You should not set this to more then single digit values.</remarks>
        </member>
        <member name="P:CouchDude.ViewQuery.StaleViewIsOk">
            <summary>CouchDB will not refresh the view even if it is stale.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.UpdateIfStale">
            <summary>CouchDB will update view after this request is served.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.FetchDescending">
            <summary>Fetches view backwards.</summary>
            <remarks>You should switch <see cref="P:CouchDude.ViewQuery.StartKey"/> with <see cref="P:CouchDude.ViewQuery.EndKey"/>
            when using this.</remarks>
        </member>
        <member name="P:CouchDude.ViewQuery.SuppressReduce">
            <summary>If set makes CouchDB to do not use reduce part of the view.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.IncludeDocs">
            <summary>Prompts database to include corresponding document as a part of each
            view result row.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.DoNotIncludeEndKey">
            <summary>If set requires database to treat requested key range
            as exclusive at the end.</summary>
        </member>
        <member name="P:CouchDude.ViewQuery.IncludeUpdateSequenceNumber">
            <summary>Requestes update sequence number to be included to query result.</summary>
        </member>
        <member name="T:CouchDude.Settings">
            <summary>CouchDude settings.</summary>
        </member>
        <member name="F:CouchDude.Settings.IdGenerator">
            <summary>Document ID generator.</summary>
        </member>
        <member name="M:CouchDude.Settings.#ctor">
            <constructor />
        </member>
        <member name="M:CouchDude.Settings.#ctor(System.Uri,System.String)">
            <constructor />
        </member>
        <member name="M:CouchDude.Settings.Register(CouchDude.Configuration.IEntityConfig)">
            <summary>Registers entity configuration.</summary>
        </member>
        <member name="M:CouchDude.Settings.GetConfig(System.Type)">
            <summary>Retrives entity configuration by entity type.</summary>
        </member>
        <member name="M:CouchDude.Settings.TryGetConfig(System.Type)">
            <summary>Retrives entity configuration by entity type returning <c>null</c> if none found.</summary>
        </member>
        <member name="M:CouchDude.Settings.GetConfig(System.String)">
            <summary>Retrives entity configuration by document type.</summary>
        </member>
        <member name="M:CouchDude.Settings.GetAllRegistredBaseTypes(System.Type)">
            <inheritdoc />
        </member>
        <member name="P:CouchDude.Settings.ServerUri">
            <summary>Base server URL.</summary>
        </member>
        <member name="P:CouchDude.Settings.DefaultDatabaseName">
            <summary>Database name.</summary>
        </member>
        <member name="P:CouchDude.Settings.Incomplete">
            <summary>Reports</summary>
        </member>
        <member name="T:CouchDude.Impl.ViewQueryResult">
            <summary>CouchDB view query result class.</summary>
        </member>
        <member name="F:CouchDude.Impl.ViewQueryResult.Empty">
            <summary>Empty query result.</summary>
        </member>
        <member name="M:CouchDude.Impl.ViewQueryResult.#ctor(CouchDude.ViewQuery,System.Collections.Generic.ICollection{CouchDude.ViewResultRow},System.Int32,System.Int32)">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.ViewQueryResult.#ctor(CouchDude.ViewQuery,System.Collections.Generic.IEnumerable{CouchDude.ViewResultRow},System.Int32,System.Int32,System.Int32)">
            <constructor />
        </member>
        <member name="P:CouchDude.Impl.ViewQueryResult.Query">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.ViewQueryResult.NextPageQuery">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Impl.ViewQueryResult`1">
            <summary>Typed CouchDB view query result class.</summary>
        </member>
        <member name="F:CouchDude.Impl.ViewQueryResult`1.Empty">
            <summary>Empty query result.</summary>
        </member>
        <member name="M:CouchDude.Impl.ViewQueryResult`1.#ctor(CouchDude.ViewQuery,System.Collections.Generic.ICollection{CouchDude.ViewResultRow},System.Int32,System.Int32,System.Func{System.Collections.Generic.IEnumerable{CouchDude.ViewResultRow},System.Collections.Generic.IEnumerable{`0}})">
            <constructor />
        </member>
        <member name="M:CouchDude.Impl.ViewQueryResult`1.#ctor(CouchDude.ViewQuery,System.Collections.Generic.IEnumerable{CouchDude.ViewResultRow},System.Int32,System.Int32,System.Int32,System.Func{System.Collections.Generic.IEnumerable{CouchDude.ViewResultRow},System.Collections.Generic.IEnumerable{`0}})">
            <constructor />
        </member>
        <member name="P:CouchDude.Impl.ViewQueryResult`1.Query">
            <inheritdoc/>
        </member>
        <member name="P:CouchDude.Impl.ViewQueryResult`1.NextPageQuery">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.Impl.ViewQueryUriConverter">
            <summary>Converts <see cref="T:CouchDude.ViewQuery"/> to <see cref="T:System.Uri"/>, <see cref="T:System.String"/> and back.</summary>
        </member>
        <member name="M:CouchDude.Impl.ViewQueryUriConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.ViewQueryUriConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.ViewQueryUriConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:CouchDude.Impl.ViewQueryUriConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:CouchDude.ViewResultRow">
            <summary>CouchDB query result row.</summary>
        </member>
        <member name="M:CouchDude.ViewResultRow.#ctor">
            <constructor />
        </member>
        <member name="M:CouchDude.ViewResultRow.#ctor(CouchDude.IJsonFragment,CouchDude.IJsonFragment,System.String,CouchDude.IDocument)">
            <constructor />
        </member>
        <member name="P:CouchDude.ViewResultRow.Key">
            <summary>View key.</summary>
        </member>
        <member name="P:CouchDude.ViewResultRow.Value">
            <summary>View value.</summary>
        </member>
        <member name="P:CouchDude.ViewResultRow.DocumentId">
            <summary>Document ID associated with view row.</summary>
        </member>
        <member name="P:CouchDude.ViewResultRow.Document">
            <summary>Document associated with the row.</summary>
        </member>
    </members>
</doc>
